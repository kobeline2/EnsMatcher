本プロジェクトでは、日本気象協会が提供するリアルタイムアンサンブル降雨予測データ（1日2回更新、51メンバー、最長360時間予報 ￼）を効率的に活用するため、流域ごとに51本の予測を少数の代表パターンへ集約し、更新ごとにどの降雨パターンの発生確率が高まっているかを把握しやすくする仕組みを構築します。大規模な気候データセット D4PDF（5kmメッシュ・過去気候約6000年分のアンサンブル降雨データ ￼）を用いて事前に代表的な降雨パターン（クラスタ）を抽出し、それを基底としてリアルタイム予測を各クラスタにマッチングします。さらに、過去の大規模出水事例について、予測のクラスタ分類結果と実観測（解析雨量）のクラスタを比較することで、分類精度や手法の有効性を検証します。

目的: 51メンバーの膨大な予測データを現場で扱いやすい情報（代表パターン及びその確率）に要約し、ダム操作等の意思決定を支援することです。また、開発者が様々なクラスタリング手法やパラメータを試せる柔軟性を持たせつつ、最終的にはエンドユーザがコマンド一発で一連の処理を実行できるようにします。

システム全体のアーキテクチャ

本システムは、複数の処理モジュールから構成され、それらをMATLABのCUI（コマンドライン）環境で統合的に実行します。主要な処理フローは以下のとおりです（流域Aを例に説明）:
	1.	前処理 (Preprocessing):
	•	D4PDFデータ抽出: 日本全国をカバーするD4PDF NetCDFデータから、対象流域Aのポリゴンに重なる格子点（観測点相当）を抽出します（この部分のみPythonを使用）。抽出した点についてティーセン分割（ボロノイ分割）により各点の代表エリアを計算し、各年の年間最大降雨など上位nRank位までのnHour時間降雨パターンを取り出します。これにより、各年から最大nRank件、総計6000年 × nRank件の降雨パターン（各パターンは時間長nHour・空間次元=流域内測点数）が得られます。
	•	リアルタイム予測 (ENS) 前処理: 毎回更新される51メンバー・360時間長の予報データについて、必要な先行nHour時間分のみを切り出します。形式をD4PDFと同じnHour×測点数のマトリクス形状に変換し、空間解像度の差異がある場合は**D4PDFの格子点上に内挿（補間）**しておきます。こうすることで、予測データを後段のクラスタリング基底と同じ土俵で扱えます。
	•	解析雨量 (観測) 前処理: 過去の実観測降雨データ（解析雨量; AMeDASベース）も同様に流域ポリゴンで領域抽出します（事前のデータ統合にC++を利用し、その出力をPythonで流域抽出・内挿処理する想定）。リアルタイム予測やD4PDFと同じnHour×測点数形式に整形し、D4PDF格子へ内挿しておきます。
	2.	クラスタリング (Clustering):
流域AにおけるD4PDF由来の多数の降雨パターン（6000×nRank件）に対しクラスタリング手法を適用し、代表的な降雨パターンを抽出します。クラスタ数nClusterはユーザ指定または解析的に決定します。クラスタリング手法はK-means、Ward法階層的クラスタリング、HDBSCANなど複数選択肢に対応可能とし、設定ファイルで手法やパラメータを選択できるようにします。クラスタリングの結果として、各クラスタに属するパターン群とクラスタ代表波形（代表的な降雨時間分布、まずは各クラスタ内の平均パターンなど）を求め、保存します。
	3.	マッチング (予測のクラスタ分類):
リアルタイム予測（各更新時刻ごとの51メンバー分）について、上記で得たクラスタに逐次分類します。クラスタリングと同じ手法・距離尺度に基づき、各予測メンバーの降雨パターン（nHour×測点数のマトリクス）を最も近いクラスタに割り当てます。これにより、予測時点ごとに**各クラスタの出現確率（何人のメンバーがそのクラスタに属したか/51）**が算出されます。更新のたびにこの確率分布を更新し、ユーザには「どの降雨パターンがどれだけの確率で予想されているか」を提示できるようにします。
	4.	検証 (Validation):
過去の大規模出水事例（流域Aにおける50ケースなど）について検証を行います。各ケースの実際の観測降雨（解析雨量）のnHour降雨パターンを上述のクラスタに分類し、「正解クラスタ」とみなします。そして、そのケース期間中の各予測更新時刻における予測メンバーのクラスタ分布と比較します。例えば、正解クラスタがXだった場合に、予測の51メンバー中何人がクラスタXに分類されていたか、といったヒット率や、他のクラスタに誤分類された頻度などを評価し、クラスタリング・マッチング手法の妥当性を検証します。
	5.	反復解析/開発モード:
上記の一連処理はエンドユーザ向けには自動一括実行できますが、開発者向けには各ステップを個別に実行・検証できるようにします。例えば、クラスタリング手法やパラメータをチューニングする際はクラスタリング部分のみ何度も繰り返し実行し、その結果を評価できるようにします。このため、各処理をモジュール化し、独立に呼び出せる設計とします。ただし、開発者向け機能は簡便さより柔軟性を優先し、最終的なユーザ向けシナリオではワンコマンドで全処理が走ることを重視します。

